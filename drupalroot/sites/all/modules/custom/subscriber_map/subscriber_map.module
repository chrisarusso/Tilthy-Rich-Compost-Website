<?php
/**
 * @file
 * Code for the subscriber_map feature.
 */

include_once('subscriber_map.features.inc');

/**
 * Implements hook_views_pre_render().
 * @param type $view
 */
function subscriber_map_views_pre_render(&$view) {
  // Don't muck with json returns while editing view.
  if ($view->editing == TRUE) {
    return;
  }

  switch($view->name) {
    case 'map':
      // Store up the locations to be passed to javascript.
      $locations = array();
      foreach($view->result as $key => $result) {
        if (!is_null($result->field_field_location[0]['raw']['longitude'])) {
          $locations[$key] = array(
            'access' => $result->users_access,
            'status' => $result->users_status,
            'uid'     => $result->uid,
            'lon' => $result->field_field_location[0]['raw']['longitude'],
            'lat' => $result->field_field_location[0]['raw']['latitude'],
            'title'   => check_plain($result->field_field_first_name[0]['raw']['safe_value'] . " " . $result->field_field_last_name[0]['raw']['safe_value']),
            'address' => drupal_render($result->field_field_location[0]['rendered']),
            'bucket_location' => empty($result->field_field_bucket_location) ? '' : $result->field_field_bucket_location[0]['raw']['safe_value'],
            'color' => empty($result->field_field_route) ? 'blue' : _subscriber_map_get_color($result->field_field_route[0]['rendered']['#markup']),
          );
        }
      }
      // Add Google maps API.
      drupal_add_js('http://maps.googleapis.com/maps/api/js?sensor=false', array('type' => 'external', 'scope' => 'header'));

      // Add Custom JS.
      drupal_add_js(drupal_get_path('module', 'subscriber_map') . '/js/subscriber_map.js');

      // Make locations available to js.
      $js_settings = array('subscriber_map' => $locations);
      drupal_add_js($js_settings, array('type' => 'setting'));

      // Add some minimal CSS
      drupal_add_css(drupal_get_path('module', 'subscriber_map') . '/css/subscriber_map.css');
      break;
  }

}

/**
 * @param $route_name
 *  The name of the route
 * @return string
 *  Returns a color for the map pin to distinguish routes on the map
 *  when viewing all of them.
 */
function _subscriber_map_get_color($route_name) {
  static $route_names = array();
  $colors = array('blue', 'brown', 'green');
  if (!isset($route_names[$route_name])) {
    $route_names[$route_name] = $colors[count($route_names)];
  }

  return $route_names[$route_name];
}