<?php

/**
 * @file
 * General customizations to compost website.
 */

/*
 * Implements hook_menu()
 */
function compost_customizations_menu() {

  $items = array();

  // Define an always accessible path to receive IPNs.
  $items['paypal/ipn'] = array(
    'page callback' => '_compost_customizations_paypal_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}
/*
 * Implements hook_mail()
 */
function compost_customizations_mail_alter(&$message) {
  // Set the from address to the site's email so emails don't get blocked coming from uncontrolled sources
  $site_from_email = variable_get('site_mail',  $message['from']);
  $message['headers']['Return-Path']=  $message['from'];
  $message['headers']['From'] = $message['headers']['Sender']  = $message['from'] = $site_from_email;
}

/*
 * Implements hook_block_info()
 */
function compost_customizations_block_info() {

  $blocks['paypal_payment_form'] = array(
    'info' => t('Paypal payment form'),
    'cache' => DRUPAL_NO_CACHE,
  );


  return $blocks;
}

/*
 * Implements hook_block_view()
 */
function compost_customizations_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'paypal_payment_form':
      $block['subject'] = t('Paypal payment form');
      $block['content'] = array(
        '#theme' => 'paypal_payment_form'
      );
      break;
  }
  return $block;

}

/*
 * Implements hook_theme()
 */
function compost_customizations_theme() {
  // Allow for easy way to swap between test payment form and production
  // via local.settings.php, hence not DB dependent
  global $conf;
  $sandbox_string = ($conf['production']) ? '' : 'sandbox_';
  return array(
    'paypal_payment_form' => array(
      'template' =>  "templates/" . $sandbox_string . "paypal_payment_form"
    ),
  );
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function compost_customizations_form_user_register_form_alter(&$form, $form_state, $form_id) {
  // Change "Create new account" to "Subscribe"
  $form['actions']['submit']['#value'] = t('Subscribe');

  // Only reveal mobile carrier inquiry if user wants text reminders
  $form['field_mobile_carrier_provider']['#states'] = array(
    'invisible' => array(
      ':input[name="field_reminders[und][2]"]' => array('checked' => FALSE),
    ),
  );

  // Add validation to ensure if user wants text messages, that they've selected a mobile carrier
  $form['#validate'][] = '_compost_customizations_mobile_carrier_validate';

  // Add custom submit handling
  $form['#submit'][] = '_compost_customizations_user_register_submit';

}

/*
 * Validation function for registrants selecting mobile text reminders
 */
function _compost_customizations_mobile_carrier_validate($form, $form_state) {
  $v = $form_state['values'];

  // If user opted in to text reminders, but did not provide mobile provider, set error
  if ($v['field_reminders'][LANGUAGE_NONE][1]['value'] == 2
    && $v['field_mobile_carrier_provider'][LANGUAGE_NONE][0]['value'] == null) {
    form_error($form['field_mobile_carrier_provider'], t('Please select a mobile carrier when opting into text reminders'));
  }
}

/*
 * We allow users to signup and since there is no hard-fast obligation to pay, they are redirected to the payment
 * page after finishing their registration
 */
function _compost_customizations_user_register_submit($form, &$form_state) {
  // Redirect to our pyament page which consists of a block on an empty node page
  $form_state['redirect'] = 'payment';
  // Unset the welcome message from the user so (s)he doesn't expect email
  drupal_get_messages('status');
  drupal_set_message(t('Thank you so much for subscribing!  Please help us out financially if you can!'));

}

/*
 * Implements hook_menu_alter()
 */
function compost_customizations_menu_alter(&$items) {
  // Replace /user/register with /subscribe
  $user_reg = $items['user/register'];
  $items['subscribe'] = $user_reg;
  unset($items['user/register']);
}

/*
 * Listener function to process Paypal IPNs
 *
 * Local testing can be done by mimicking an external POST via curl.  First enable debugger, which sets the debugger
 * cookie.  Then issue:
 * curl [LOCAL-URL]/paypal/ipn -b "ZendDebuggerCookie=127.0.1.1%2C127.0.0.1%3A10137%3A0||004|77742D65|19201" -d "good=golly"
 * -d key value pair can be replaced with a file
 */
function _compost_customizations_paypal_process_ipn() {
  //require_once drupal_get_path('module', 'compost_customizations') . '/IPN_PHP/IPN_PHP.php';

  // Log it
  watchdog('paypal_ipn', 'Post: @Post', array('@Post' => print_r($_POST, TRUE)), WATCHDOG_INFO);

  // @todo: Handle it.  Update when we get live data to test with

  // If IPN for instant payment, set user's selection in his/her profile
  // Set the user's payment selection
}