<?php

/**
 * @file
 * General customizations to compost website.
 */

/*
 * Implements hook_menu()
 */
function compost_customizations_menu() {

  $items = array();

  // Define an always accessible path to receive IPNs.
  $items['paypal/ipn'] = array(
    'page callback' => '_compost_customizations_paypal_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/administration/compost_customizations'] = array(
    'title' => 'Reminder form',
    'description' => 'Adjust compost customization settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('compost_customizations_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'compost_customizations.inc',
  );

  return $items;

}
/*
 * Implements hook_mail()
 */
function compost_customizations_mail_alter(&$message) {

  // Stolen from contact_reply_to module, but modified because it still
  // wasn't working without sending from a different email than receiving.
  if (in_array($message['id'], array('contact_page_mail', 'contact_page_copy', 'contact_user_mail', 'contact_user_copy'))) {
    // Use drush to vset lazy version of this right now
    $contact_form_email = variable_get('contact_form_email', 'info@tilthyrichcompost.com');
    $message['headers']['Reply-To'] = $message['from'];
    $message['from'] = $message['headers']['From'] = $contact_form_email;
  }
  elseif ($message['id'] == 'user_register_pending_approval' && $_POST['gift'] == 1) {
    // Hijack gift emails so the recipient is unaware until gift is presented.
    // Per http://productforums.google.com/forum/#!topic/gmail/hZoLmPzHeWk
    //Gmail Still ignores
    $message['to'] = variable_get('site_mail',  $message['from']);
  }

}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function compost_customizations_form_user_register_form_alter(&$form, $form_state, $form_id) {

  if (isset($_GET['gift'])) {

    $form['gift'] = array(
      '#type' => 'hidden',
      '#value' => TRUE,
      '#attributes' => array(
        'id' => 'gift_registration',
      ),
    );

    $fields = array(
      'field_first_name',
      'field_last_name',
      'field_phone_number',
    );

    foreach ($fields as $field) {
      $form[$field][LANGUAGE_NONE][0]['value']['#required'] = 0;
    }
    $form['field_location'][LANGUAGE_NONE][0]['#required'] = 0;

    $message = t('You are currently pre-paying for someone else\'s subscription,
      so fill out his/her information below. To register yourself, please click
      !here', array('!here' => l('here', 'subscribe')));

    $form['anonymous_gift'] = array(
      '#title' => t('Give this gift anonymously?'),
      '#description' => t('We\'ll pay the favor forward to an interested subscriber
        who cannot afford the service'),
      '#weight' => -4,
      '#type' => 'checkbox',
    );

    // Hide fields that don't apply if anonymous gift is checked
    $fields = array(
      'field_first_name',
      'field_last_name',
      'field_location',
      'field_bucket_location',
      'field_bucket_size',
      'field_phone_number',
      'field_reminders',
      'field_service_type',
      'field_company_name',
    );

    foreach ($fields as $field) {
      $form[$field]['#states'] = array(
        'invisible' => array(
          ':input[name="anonymous_gift"]' => array('checked' => TRUE),
        )
      );

      if (isset($form[$field][LANGUAGE_NONE])) {
        $form[$field][LANGUAGE_NONE]['#states'] = array(
          'invisible' => array(
            ':input[name="anonymous_gift"]' => array('checked' => TRUE),
          )
        );
      }
    }

    // One-time payment option
    $form['gift_length'] = array(
      '#type' => 'select',
      '#title' => 'Months of service',
      '#default_value' => '12',
      '#options' => array(
        '3' => '3',
        '6' => '6',
        '12' => '12',
      ),
      '#weight' => $form['field_monthly_contribution']['#weight'] - .001,
    );

    $email_message = t('Fill out <i>your</i> email if gifting anonymously!');
    $form['email_helper'] = array(
      '#type' => 'item',
      '#markup' => '<div id="gift_email_helper">' . $email_message . '</div>',
      '#states' => array(
        'invisible' => array(
          ':input[name="anonymous_gift"]' => array('checked' => FALSE),
        ),
      ),
      '#weight' => -3,
    );
  }
  else {
    $message = t('Interested in giving the gift of compost?  Sign up a friend,
    or stranger !here', array('!here' => l('here', 'subscribe', array(
      'query' => array('gift' => 'true', 't' => time()),
    ))));
  }

  $form['gift_message'] = array(
    '#markup' => '<div id="gift-message">' . $message . '</div>',
    '#weight' => -5,
  );

  // Only reveal mobile carrier inquiry if user wants text reminders
  $form['field_mobile_carrier_provider']['#states'] = array(
    'invisible' => array(
      ':input[name="field_reminders[und][2]"]' => array('checked' => FALSE),
    ),
  );

  $form['field_location'][LANGUAGE_NONE][0]['#title'] = t('Address');

  // Make non-admin registration subscription level required
  $form['field_subscription_level'][LANGUAGE_NONE]['#required'] = user_access('Administer users') ? FALSE : 1;

  // Add validation to ensure if user wants text messages, that they've selected a mobile carrier
  $form['#validate'][] = '_compost_customizations_mobile_carrier_validate';
  $form['#submit'][] = '_compost_customizations_gift_form_submit';
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function compost_customizations_form_user_profile_form_alter(&$form, $form_state, $form_id) {

  // Only reveal mobile carrier inquiry if user wants text reminders
  $form['field_mobile_carrier_provider']['#states'] = array(
    'invisible' => array(
      ':input[name="field_reminders[und][2]"]' => array('checked' => FALSE),
    ),
  );

  // Add validation to handle skip_day
  $form['#validate'][] = '_compost_customizations_user_skip_day_validate';

  $form['field_skip_day'][LANGUAGE_NONE]['#title'] = t('Enter dates you won\'t need a pick up (e.g. on vacation)');

  // Make non-admin subscription level required when updating profile
  $form['field_subscription_level'][LANGUAGE_NONE]['#required'] = user_access('Administer users') ? FALSE : 1;

  // Hide but don't delete previous skip days
  $form = _compost_customizations_hide_past_skip_days($form);
}

/*
 * Validation function for registrants selecting mobile text reminders
 */
function _compost_customizations_mobile_carrier_validate($form, $form_state) {
  $v = $form_state['values'];

  // If user opted in to text reminders, but did not provide mobile provider, set error
  if ($v['field_reminders'][LANGUAGE_NONE][1]['value'] == 2
    && $v['field_mobile_carrier_provider'][LANGUAGE_NONE][0]['value'] == null) {
    form_error($form['field_mobile_carrier_provider'], t('Please select a mobile carrier when opting into text reminders'));
  }
}

/*
 * Validation function for users selecting skip days
 */
function _compost_customizations_user_skip_day_validate($form, $form_state) {

  $today = date('Y-m-d', time());

  // Don't proceed if the user isn't associated to a route to avoid php warnings    
  if (!isset($form_state['user'])) {
      return;
  }

  $route = node_load($form_state['user']->field_route[LANGUAGE_NONE][0]['target_id']);
  $pickup_day = $route->field_pickup_day[LANGUAGE_NONE][0]['value'];

  foreach ($form_state['values']['field_skip_day'][LANGUAGE_NONE] as $key => $date) {

    if (is_numeric($key) && $form_state['user']->field_skip_day[LANGUAGE_NONE][$key]['value'] != $date['value']) {

      // Don't allow NEW submission of any day before today
      if ($date['value'] < $today) {
        form_error($form['field_skip_day'][LANGUAGE_NONE][$key], t('You cannot add skip days from the past.'));
      }
      // Don't allow submission of a different day of the week than the user's scheduled day
      elseif (date('l', strtotime($date['value'])) != $pickup_day) {
          form_error($form['field_skip_day'][LANGUAGE_NONE][$key], t('Please only select one of your future pick up days.
         Your pick ups are on @pickup_day' . '.', array('@pickup_day' => $pickup_day)));
      }
    }
  }
}

/*
 * Implements hook_menu_alter()
 */
function compost_customizations_menu_alter(&$items) {
  // Replace /user/register with /subscribe
  $user_reg = $items['user/register'];
  $items['subscribe'] = $user_reg;
  unset($items['user/register']);
}

/*
 * Listener function to process Paypal IPNs
 *
 * Local testing can be done by mimicking an external POST via curl.  First enable debugger, which sets the debugger
 * cookie.  Then issue:
 * curl [LOCAL-URL]/paypal/ipn -b "ZendDebuggerCookie=127.0.1.1%2C127.0.0.1%3A10137%3A0||004|77742D65|19201" -d "good=golly"
 * -d key value pair can be replaced with a file
 */
function _compost_customizations_paypal_process_ipn() {
  //require_once drupal_get_path('module', 'compost_customizations') . '/IPN_PHP/IPN_PHP.php';

  // Log it
  watchdog('paypal_ipn', 'Post: @Post', array('@Post' => print_r($_POST, TRUE)), WATCHDOG_INFO);

  // @todo: Handle it.  Update when we get live data to test with

  // If IPN for instant payment, set user's selection in his/her profile
  // Set the user's payment selection
}

/**
 * @param $form
 *   Form variable as it passes through hook_form_alter()
 */
function _compost_customizations_hide_past_skip_days($form) {
  $today = date('Y-m-d', time());
  $children = element_children($form['field_skip_day'][LANGUAGE_NONE]);

  foreach ($children as $key) {
    $value = $form['field_skip_day'][LANGUAGE_NONE][$key]['#default_value']['value'];
    if (is_numeric($key) && !empty($value) && $value < $today) {
      $form['field_skip_day'][LANGUAGE_NONE][$key]['#type'] = 'hidden';
    }
  }

  return $form;
}

/**
 * @param $user
 *  A user object
 * @return string
 *  The formatted first and last name of the user
 */
function compost_customizations_format_name($user) {
  $account = user_load($user->uid);

  $first_name = $account->field_first_name[LANGUAGE_NONE][0]['safe_value'];
  $last_name = $account->field_last_name[LANGUAGE_NONE][0]['safe_value'];

  return (!empty($first_name) && !empty($last_name)) ? $first_name . ' ' . $last_name : $account->mail;
}

/**
 * @param $user
 *  User object
 *
 * returns
 *  Email that will go to user's cell phone
 */
function compost_customizations_retrieve_text_email($user) {
  $carrier = $user->field_mobile_carrier_provider[LANGUAGE_NONE][0]['value'];
  $unformatted_phone_number = $user->field_phone_number[LANGUAGE_NONE][0]['value'];
  $formatted_phone_number = preg_replace("/[^0-9]+/", "", $unformatted_phone_number);

  switch ($carrier) {
    case 'Verizon':
      return $formatted_phone_number . '@vtext.com';
    case 'AT&T':
      return $formatted_phone_number . '@txt.att.net';
    case 'Sprint':
      return $formatted_phone_number . '@messaging.sprintpcs.com';
    case 'T-Mobile':
      return $formatted_phone_number . '@tmomail.net';
    case 'U.S. Cellular':
      return $formatted_phone_number . '@email.uscc.net';
    default:
      return false;
  }
}

/*
 * Returns users (objects) that opted into text reminders
 */
function compost_customizations_get_text_reminders() {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_active', 'value', 1)
    ->fieldCondition('field_reminders', 'value', 2);

  $result = $query->execute();

  if (isset($result['user'])) {
    $user_uids = array_keys($result['user']);
    $users = entity_load('user', $user_uids);
  }

  $users = _compost_customizations_remove_skippers($users);

  return $users;

}

/*
 * Returns users (objects) that opted into email reminders
 */
function compost_customizations_get_email_reminders() {

  $query = new EntityFieldQuery();

  $now = time();
  $tomorrow_timestamp = $now + 60 * 60 * 24;
  $tomorrow = date('l', $tomorrow_timestamp);
  // Somewhat arbitrary.  Reminders ought to be once a week, but on certain
  // weeks, like holidays, the gap will be larger or smaller.  Three days seems
  // safe that it'll never be less than
  $three_days_ago = $now - 3 * (60 * 60 * 24);

  // Users are created with a 0 for last reminded starting 2014-Mar-09
  // prior to that, folks were not getting email reminders because
  // last reminded was never being set for new accounts.
  // This was fixed at configuration level instead of code level
  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_reminders', 'value', 1)
    ->fieldCondition('field_active', 'value', 1)
    ->fieldCondition('field_collection_day', 'value', $tomorrow)
    ->fieldCondition('field_last_reminded', 'value', $three_days_ago, '<');

  $result = $query->execute();

  if (isset($result['user'])) {
    $user_uids = array_keys($result['user']);
    $users = entity_load('user', $user_uids);

    $users = _compost_customizations_remove_skippers($users);

    return $users;
  }
  else {
    return array();
  }

}

/*
 * Implements hook_mail()
 */
function compost_customizations_mail($key, &$message, $headers) {

  switch ($key) {
    case 'text_email_reminder':
      $message['body'][] = t('Put your compost bucket(s) out tonight please!  Text back @cell_phone with any issues',
        array('@cell_phone' => $message['params']['captain']->field_phone_number[LANGUAGE_NONE][0]['value']));
      $message['subject'] = t('Compost Bucket Reminder');
      break;
    case 'email_reminder':
      $account = $message['params']['user'];
      $captain = $message['params']['captain'];

      $message['body'][] = t('Dearest @name, Put your compost bucket(s) out tonight please!',
        array('@name' => compost_customizations_format_name($account)));

      $message['body'][] = t('If you do not need service this week, please login to your profile: @profile_link and
      elect for a skip day.', array('@profile_link' => url('user/' . $account->uid . '/edit', array('absolute' => TRUE))));

      $message['body'][] = t('If you need to recover your password to login, you may do so here: !link',
          array('!link' => url('user/password', array('absolute' => TRUE)))) . ',';

      $message['body'][] = t('Please update any of your profile information if it is not correct below');
      $message['body'][] = t('Address: @address',
        array('@address' => $account->field_location[LANGUAGE_NONE][0]['street']));

      if (!empty($account->field_bucket_location)) {
        $message['body'][] = t('Bucket Location: @location',
          array('@location' => $account->field_bucket_location[LANGUAGE_NONE][0]['value']));
      }

      $message['body'][] = t('Phone Number: @phone_number',
        array('@phone_number' => $account->field_phone_number[LANGUAGE_NONE][0]['value']));

      $message['body'][] = t('If you missed pick up or are a drop-off subscriber, the drop-off address is: @addy',
        array('@addy' => $captain->field_location[LANGUAGE_NONE][0]['street']));

      $message['body'][] = t('Thank you so much for your service') . ',';
      $message['body'][] = "- " . t('Your friends @') . ' ' . url('', array('absolute' => TRUE));
      $message['subject'] = t('Reminder: Put out your compost bucket(s)');
  }
}

/*
 * Implements hook_cron()
 */
function compost_customizations_cron() {

  if (variable_get('skip_reminders', FALSE)) {
    return;
  }

  compost_customizations_queue_reminders();
}

// Implementation per http://rbayliss.net/drupal-queue-api
/**
 * Implements hook_cron_queue_info()
 */
function compost_customizations_cron_queue_info() {
  $queues['email_reminders'] = array(
    'worker callback' => 'compost_customizations_send_email_reminders',
    'time' => 300,
  );

  $queues['text_reminders'] = array(
    'worker callback' => 'compost_customizations_send_text_reminders',
    'time' => 300,
  );

  return $queues;
}

/**
 * @param $user
 *  User object as queue item
 */
function compost_customizations_send_email_reminders($user) {

  $route = node_load($user->field_route[LANGUAGE_NONE][0]['target_id']);
  $captain = user_load($route->field_route_captain[LANGUAGE_NONE][0]['target_id']);
  $params = array('user' => $user, 'captain' => $captain);
  drupal_mail('compost_customizations', 'email_reminder', $user->mail, $user->language, $params);
}

/**
 * @param $user
 *  User object as queue item
 */
function compost_customizations_send_text_reminders($user) {
  // Grab formatted text email address as well as captains text-back number for message body
  $text_email = compost_customizations_retrieve_text_email($user);
  $route = node_load($user->field_route[LANGUAGE_NONE][0]['target_id']);
  $captain = user_load($route->field_route_captain[LANGUAGE_NONE][0]['target_id']);
  $params = array('captain' => $captain);
  drupal_mail('compost_customizations', 'text_email_reminder', $text_email, $user->language, $params);
}

/**
 * Implements hook_field_formatter_info().
 */
function compost_customizations_field_formatter_info() {
  // Add formatter to show just the street name instead of full location with GPS coordinates
  return array(
    'just_street_name' => array(
      'label' => t('Street name only'),
      'field types' => array('location'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function compost_customizations_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Probably should be some qualifier here
  $element[0]['#markup'] = $items[0]['street'];
  return $element;
}

/**
 * @param $users
 *  An array of users keyed by uid
 *
 * Returns all users who haven't skipped the upcoming pick up
 */
function _compost_customizations_remove_skippers($users) {

  $time = time();
  foreach ($users as $user) {
    foreach($user->field_skip_day as $day) {
      $stamp = strtotime($day[0]['value']);
      if ($stamp > $time && $stamp < $time + 7 * 24 * 60 * 60) {
        unset ($users[$user->uid]);
      }
    }
  }

  return $users;

}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function compost_customizations_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // Inject our routes as a select option instead of leaving it to text input
  $name = $form_state['view']->name;
  if (isset($form_state['view']) && ($name == 'map' || $name == 'addresses' || $name == 'schedule')){

    $results = db_select('node','n')
      ->fields('n',array('title'))
      ->condition('type','route')
      ->condition('status', 1)
      ->execute()
      ->fetchAllKeyed(0, 0);

    $default['All'] = t('All routes');

    $options = array_merge($default, $results);

    $form['title'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => 'All',
    );
  }
}


/**
 * Implements hook_views_pre_render().
 * @param type $view
 */
function compost_customizations_views_pre_render(&$view) {
  if ($view->editing == TRUE) {
    return;
  }

  switch ($view->name) {
    case 'addresses':
      // Use eight days to be safe
      $eight_days_ago = 60 * 60 * 24 * 8;
      $now = time();
      $date_format = 'Y-m-d';
      $today = date($date_format, $now);

      foreach ($view->result as $id => $subscriber) {
        // If skip day is today, show "skip"
        if (!empty($subscriber->field_field_skip_day)) {
          foreach ($subscriber->field_field_skip_day as $skip_day) {
            if (date($date_format, strtotime($skip_day['raw']['value'])) == $today) {
              $view->result[$id]->skip = TRUE;
            }
          }
        }

        // If the user joined in the last 8 days, make sure it's known she's new
        if ($subscriber->users_created > $now - $eight_days_ago) {
          $view->result[$id]->new = TRUE;
        }
      }

    break;
  }

}

/*
 * Implements hook_preprocess_views_view()
 */
function compost_customizations_preprocess_views_view(&$variables, $hook) {

  if ($variables['view']->name != 'addresses') {
    return;
  }

  foreach ($variables['view']->result as $id => $result) {
    if ($result->new == TRUE) {
      $variables['row_classes'][$id][] = t('new');
    }

    if ($result->skip == TRUE) {
      $variables['row_classes'][$id][] = t('skip');
    }
  }
}

/*
 * Implements hook_preprocess_views_data_export_csv_body()
 */
function compost_customizations_preprocess_views_data_export_csv_body(&$variables, $hook) {

  if ($variables['view']->name != 'addresses') {
    return;
  }

  foreach ($variables['view']->result as $id => $result) {
    if ($result->new == TRUE) {
      $variables['themed_rows'][$id]['nothing'] = '"' . t('new') .'"';
    }

    if ($result->skip == TRUE) {
      $variables['themed_rows'][$id]['nothing'] = '"' . t('skip') .'"';
    }
  }
}

/*
 * Custom submission form when user opts for a gift
 */
function _compost_customizations_gift_form_submit() {
  // Don't process unless this is a gift form
  if ($_GET['gift'] !== 'true') {
    return;
  }

  $messages = drupal_get_messages('status');

  if ($_POST['anonymous_gift']) {
    $string = 'Thank you for your anonymous contribution!  We\'ll let you
      know who you enabled to compost with this gift when we give on your
      behalf.';
  }
  else {
    $string = 'Thank you for your gift!  We\'ve kept the registration email
      to ourselves, but can forward it to you to pass along when the time is
      right.  Email us @ @email to retrieve it.';
  }

  drupal_set_message(t($string, array('@email' => variable_get('site_mail'))));

}

/*
 * Function to queue up text and email reminders from cron runs
 */
function compost_customizations_queue_reminders() {

  $now = time();
  $tomorrow_timestamp = $now + 60 * 60 * 24;
  $tomorrow = date('l', $tomorrow_timestamp);
  // Somewhat arbitrary.  Reminders ought to be once a week, but on certain
  // weeks, like holidays, the gap will be larger or smaller.  Three days seems
  // safe that it'll never be less than
  $three_days_ago = $now - 3 * (60 * 60 * 24);
  $hour_of_the_day = date('G', $now);

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_reminders', 'value', 0, '>')
    ->fieldCondition('field_active', 'value', 1)
    ->fieldCondition('field_collection_day', 'value', $tomorrow)
    ->fieldCondition('field_last_reminded', 'value', $three_days_ago, '<')
    ->fieldCondition('field_reminder_time', 'value', $hour_of_the_day, '<=');

  $result = $query->execute();

  if (!empty($result['user'])) {

    $text_queue = DrupalQueue::get('text_reminders');
    $email_queue = DrupalQueue::get('email_reminders');

    $user_uids = array_keys($result['user']);
    $users = entity_load('user', $user_uids);

    foreach($users as $user) {
      if (!empty($user->field_reminders)) {
        foreach($user->field_reminders[LANGUAGE_NONE] as $reminder) {
          if ($reminder['value'] == 1) {
            $email_queue->createItem($user);
          }
          elseif ($reminder['value'] == 2) {
            $text_queue->createItem($user);
          }
        }
        // Mark them as reminded here.  If the users is not marked here, and
        // rather when the message is sent, they would be queued twice
        $user->field_last_reminded[LANGUAGE_NONE][0]['value'] = $_SERVER['REQUEST_TIME'];
        field_attach_update('user', $user);
      }
    }
  }
}