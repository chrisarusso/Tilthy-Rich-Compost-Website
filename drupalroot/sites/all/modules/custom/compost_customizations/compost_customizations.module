<?php

/**
 * @file
 * General customizations to compost website.
 */

/*
 * Implements hook_menu()
 */
function compost_customizations_menu() {

  $items = array();

  // Define an always accessible path to receive IPNs.
  $items['paypal/ipn'] = array(
    'page callback' => '_compost_customizations_paypal_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}
/*
 * Implements hook_mail()
 */
function compost_customizations_mail_alter(&$message) {
  // Set the from address to the site's email so emails don't get blocked coming from uncontrolled sources
  $site_from_email = variable_get('site_mail',  $message['from']);
  $message['headers']['Return-Path']=  $message['from'];
  $message['headers']['From'] = $message['headers']['Sender']  = $message['from'] = $site_from_email;
}

/*
 * Implements hook_block_info()
 */
function compost_customizations_block_info() {

  $blocks['paypal_payment_form'] = array(
    'info' => t('Paypal payment form'),
    'cache' => DRUPAL_NO_CACHE,
  );


  return $blocks;
}

/*
 * Implements hook_block_view()
 */
function compost_customizations_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'paypal_payment_form':
      $block['subject'] = t('Paypal payment form');
      $block['content'] = array(
        '#theme' => 'paypal_payment_form'
      );
      break;
  }
  return $block;

}

/*
 * Implements hook_theme()
 */
function compost_customizations_theme() {
  // Allow for easy way to swap between test payment form and production
  // via local.settings.php, hence not DB dependent
  global $conf;
  $sandbox_string = ($conf['production']) ? '' : 'sandbox_';
  return array(
    'paypal_payment_form' => array(
      'template' =>  "templates/" . $sandbox_string . "paypal_payment_form"
    ),
  );
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function compost_customizations_form_user_register_form_alter(&$form, $form_state, $form_id) {

  // Only reveal mobile carrier inquiry if user wants text reminders
  $form['field_mobile_carrier_provider']['#states'] = array(
    'invisible' => array(
      ':input[name="field_reminders[und][2]"]' => array('checked' => FALSE),
    ),
  );

  $form['field_location'][LANGUAGE_NONE][0]['#title'] = t('Address');
  // Defaults set in UI @ admin/config/people/accounts/fields/field_location
  // $form['field_location'][LANGUAGE_NONE][0]['#default_value']['city'] = t('Durham');
  // $form['field_location'][LANGUAGE_NONE][0]['#default_value']['province'] = t('North Carolina');

  // Make non-admin registration subscription level required
  $form['field_subscription_level'][LANGUAGE_NONE]['#required'] = user_access('Administer users') ? FALSE : 1;

  // Add validation to ensure if user wants text messages, that they've selected a mobile carrier
  $form['#validate'][] = '_compost_customizations_mobile_carrier_validate';

  // Add custom submit handling
  $form['#submit'][] = '_compost_customizations_user_account_submit';

}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function compost_customizations_form_user_profile_form_alter(&$form, $form_state, $form_id) {

  // Only reveal mobile carrier inquiry if user wants text reminders
  $form['field_mobile_carrier_provider']['#states'] = array(
    'invisible' => array(
      ':input[name="field_reminders[und][2]"]' => array('checked' => FALSE),
    ),
  );

  // Add validation to handle skip_day
  $form['#validate'][] = '_compost_customizations_user_skip_day_validate';

  $form['field_skip_day'][LANGUAGE_NONE]['#title'] = t('Enter dates you won\'t need a pick up (e.g. on vacation)');

  // Make non-admin subscription level required when updating profile
  $form['field_subscription_level'][LANGUAGE_NONE]['#required'] = user_access('Administer users') ? FALSE : 1;

  // Hide but don't delete previous skip days
  $form = _compost_customizations_hide_past_skip_days($form);

  // Add custom submit handling
  $form['#submit'][] = '_compost_customizations_user_account_submit';
}

/*
 * Validation function for registrants selecting mobile text reminders
 */
function _compost_customizations_mobile_carrier_validate($form, $form_state) {
  $v = $form_state['values'];

  // If user opted in to text reminders, but did not provide mobile provider, set error
  if ($v['field_reminders'][LANGUAGE_NONE][1]['value'] == 2
    && $v['field_mobile_carrier_provider'][LANGUAGE_NONE][0]['value'] == null) {
    form_error($form['field_mobile_carrier_provider'], t('Please select a mobile carrier when opting into text reminders'));
  }
}

/*
 * Validation function for users selecting skip days
 */
function _compost_customizations_user_skip_day_validate($form, $form_state) {

  $today = date('Y-m-d', time());

  $route = node_load($form_state['user']->field_route[LANGUAGE_NONE][0]['target_id']);
  $pickup_day = $route->field_pickup_day[LANGUAGE_NONE][0]['value'];

  foreach ($form_state['values']['field_skip_day'][LANGUAGE_NONE] as $key => $date) {

    if (is_numeric($key) && $form_state['user']->field_skip_day[LANGUAGE_NONE][$key]['value'] != $date['value']) {

      // Don't allow NEW submission of any day before today
      if ($date['value'] < $today) {
        form_error($form['field_skip_day'][LANGUAGE_NONE][$key], t('You cannot add skip days from the past.'));
      }
      // Don't allow submission of a different day of the week than the user's scheduled day
      elseif (date('l', strtotime($date['value'])) != $pickup_day) {
          form_error($form['field_skip_day'][LANGUAGE_NONE][$key], t('Please only select one of your future pick up days.
         Your pick ups are on @pickup_day' . '.', array('@pickup_day' => $pickup_day)));
      }
    }
  }
}

/*
 * We allow users to signup and since there is no hard-fast obligation to pay, they are redirected to the payment
 * page after finishing their registration
 */
function _compost_customizations_user_account_submit($form, &$form_state) {

  // Don't redirect on admin form creation
  if (user_access('Administer users')) {
    return;
  }
  else {
    // If a user registered herself, notify the admin, too.
    // This is pulled from _user_mail_notify
    $params['account'] = $form_state['user'];
    drupal_mail('user', 'register_pending_approval_admin', variable_get('site_mail', ini_get('sendmail_from')), language_default(), $params);
  }

  $subscription_level = $form_state['values']['field_subscription_level'][LANGUAGE_NONE][0]['value'];
  $default_value = $form['field_subscription_level'][LANGUAGE_NONE]['#default_value'];
  // Direct them to payment if they've selected anything but FREE on registration
  // of if they are moving from no selection to a non-free selection on an admin created account
  if (($subscription_level  != "0" && $form['#form_id'] == 'user_register_form') ||
    $subscription_level  != "0" && $form['#form_id'] == 'user_profile_form' && empty($default_value)) {
    // Redirect to our pyament page which consists of a block on an empty node page
    $form_state['redirect'] = array(
      'payment',
      array('query' => array('uid' => $form_state['user']->uid, 'subscription level' => $subscription_level )),
    );

    drupal_set_message(t('You\'re not done!  Please submit your payment now.  Thank you so much for subscribing.'));
  }
  elseif ($form['#form_id'] == 'user_register_form') {
    drupal_set_message(t('Thank you so much for subscribing!  If later, you are able to help out financially please
      visit !URL', array('!URL' => l(
        'the payment page',
        'payment',
        array('query' => array('uid' => $form_state['user']->uid)))
      ))
    );
  }
}

/*
 * Implements hook_menu_alter()
 */
function compost_customizations_menu_alter(&$items) {
  // Replace /user/register with /subscribe
  $user_reg = $items['user/register'];
  $items['subscribe'] = $user_reg;
  unset($items['user/register']);
}

/*
 * Listener function to process Paypal IPNs
 *
 * Local testing can be done by mimicking an external POST via curl.  First enable debugger, which sets the debugger
 * cookie.  Then issue:
 * curl [LOCAL-URL]/paypal/ipn -b "ZendDebuggerCookie=127.0.1.1%2C127.0.0.1%3A10137%3A0||004|77742D65|19201" -d "good=golly"
 * -d key value pair can be replaced with a file
 */
function _compost_customizations_paypal_process_ipn() {
  //require_once drupal_get_path('module', 'compost_customizations') . '/IPN_PHP/IPN_PHP.php';

  // Log it
  watchdog('paypal_ipn', 'Post: @Post', array('@Post' => print_r($_POST, TRUE)), WATCHDOG_INFO);

  // @todo: Handle it.  Update when we get live data to test with

  // If IPN for instant payment, set user's selection in his/her profile
  // Set the user's payment selection
}

/*
 * Preprocess for theme('paypal_payment_form')
 */
function template_preprocess_paypal_payment_form(&$variables) {
  // Set user id in the form so we can link drupal accounts with payment
  $variables['uid'] = 0;
  if ($GLOBALS['user']->uid) {
    $variables['uid'] = $GLOBALS['user']->uid;
  }
  elseif (isset($_GET['uid']) && is_numeric($_GET['uid'])) {
    $variables['uid'] = $_GET['uid'];
  }

  $select_element = array(
    'element' => array(
      '#name' => 'os0', // Paypal code needed to work
      '#options' => _compost_customizations_paypal_payment_options(),
      '#default_value' => isset($_GET['subscription_level']) ? $_GET['subscription_level'] : 'Middle + $5',
      '#value' => isset($_GET['subscription_level']) ? $_GET['subscription_level'] : 'Middle + $5'
    ),
  );
  $variables['select_list'] = theme('select', $select_element);
}

/**
 * @param $form
 *   Form variable as it passes through hook_form_alter()
 */
function _compost_customizations_hide_past_skip_days($form) {
  $today = date('Y-m-d', time());
  $children = element_children($form['field_skip_day'][LANGUAGE_NONE]);

  foreach ($children as $key) {
    $value = $form['field_skip_day'][LANGUAGE_NONE][$key]['#default_value']['value'];
    if (is_numeric($key) && !empty($value) && $value < $today) {
      $form['field_skip_day'][LANGUAGE_NONE][$key]['#type'] = 'hidden';
    }
  }

  return $form;
}

function _compost_customizations_paypal_payment_options() {
  return array(
    "Carter level" => "Carter level : $5.00 USD - monthly",
    "Carter + $5" => "Carter + $5 : $10.00 USD - monthly",
    "Carter goes to middle school" => "Carter goes to middle school : $15.00 USD - monthly",
    "Middle of the road" => "Middle of the road : $20.00 USD - monthly",
    "Middle + $5" => "Middle + $5 : $25.00 USD - monthly",
    "One exclamation!" => "One exclamation! : $30.00 USD - monthly",
    "Golly, thanks!!" => "Golly, thanks!! : $35.00 USD - monthly",
    "Big spender!!!" => "Big spender!!! : $40.00 USD - monthly",
    "Please...?" => "Please...? : $1,000.00 USD - monthly",
  );
}

/**
 * @param $user
 *  A user object
 * @return string
 *  The formatted first and last name of the user
 */
function compost_customizations_format_name($user) {
  $account = user_load($user->uid);

  $first_name = $account->field_first_name[LANGUAGE_NONE][0]['safe_value'];
  $last_name = $account->field_last_name[LANGUAGE_NONE][0]['safe_value'];

  return (!empty($first_name) && !empty($last_name)) ? $first_name . ' ' . $last_name : $account->mail;
}

/**
 * @param $user
 *  User object
 *
 * returns
 *  Email that will go to user's cell phone
 */
function compost_customizations_retrieve_text_email($user) {
  $carrier = $user->field_mobile_carrier_provider[LANGUAGE_NONE][0]['value'];
  $unformatted_phone_number = $user->field_phone_number[LANGUAGE_NONE][0]['value'];
  $formatted_phone_number = preg_replace("/[^0-9]+/", "", $unformatted_phone_number);

  switch ($carrier) {
    case 'Verizon':
      return $formatted_phone_number . '@vtext.com';
    case 'AT&T':
      return $formatted_phone_number . '@txt.att.net';
    case 'Sprint':
      return $formatted_phone_number . '@messaging.sprintpcs.com';
    case 'T-Mobile':
      return $formatted_phone_number . '@tmomail.net';
    case 'U.S. Cellular':
      return $formatted_phone_number . '@email.uscc.net';
    default:
      return false;
  }
}

/*
 * Returns users (objects) that opted into text reminders
 */
function compost_customizations_get_text_reminders() {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_active', 'value', 1)
    ->fieldCondition('field_reminders', 'value', 2);

  $result = $query->execute();

  if (isset($result['user'])) {
    $user_uids = array_keys($result['user']);
    $users = entity_load('user', $user_uids);
  }

  $users = _compost_customizations_remove_skippers($users);

  return $users;

}

/*
 * Returns users (objects) that opted into email reminders
 */
function compost_customizations_get_email_reminders() {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_reminders', 'value', 1)
    ->fieldCondition('field_active', 'value', 1);

  $result = $query->execute();

  if (isset($result['user'])) {
    $user_uids = array_keys($result['user']);
    $users = entity_load('user', $user_uids);
  }

  $users = _compost_customizations_remove_skippers($users);

  return $users;
}

/*
 * Implements hook_mail()
 */
function compost_customizations_mail($key, &$message, $headers) {

  switch ($key) {
    case 'text_email_reminder':
      $message['body'][] = t('Put your bucket out tonight!  Text back @cell_phone with any issues',
        array('@cell_phone' => $message['params']['captain']->field_phone_number[LANGUAGE_NONE][0]['value']));
      $message['subject'] = 'Compost Bucket Reminder';
      break;
    case 'email_reminder':
      $message['body'][] = 'Put your compost bucket(s) out tonight please!';
      $message['body'][] = 'Thanks,';
      $message['body'][] = "- " . url('', array ('absolute' => true));
      $message['subject'] = 'Compost Bucket Reminder';
  }
}

/*
 * Implements hook_cron()
 */
function compost_customizations_cron() {
  // Timing should be controlled by elysia_cron
  // Fill out queues now, and they get executed as queues later in the cron run

  $text_queue = DrupalQueue::get('text_reminders');
  foreach (compost_customizations_get_text_reminders() as $item) {
    $text_queue->createItem($item);
  }

  $email_queue = DrupalQueue::get('email_reminders');
  foreach (compost_customizations_get_email_reminders() as $item) {
    $email_queue->createItem($item);
  }
}

// Implementation per http://rbayliss.net/drupal-queue-api
/**
 * Implements hook_cron_queue_info()
 */
function compost_customizations_cron_queue_info() {
  $queues['email_reminders'] = array(
    'worker callback' => 'compost_customizations_send_email_reminders',
    'time' => 300,
  );

  $queues['text_reminders'] = array(
    'worker callback' => 'compost_customizations_send_text_reminders',
    'time' => 300,
  );

  return $queues;
}

/**
 * @param $user
 *  User object as queue item
 */
function compost_customizations_send_email_reminders($user) {
  drupal_mail('compost_customizations', 'email_reminder', $user->mail, $user->language);
}

/**
 * @param $user
 *  User object as queue item
 */
function compost_customizations_send_text_reminders($user) {
  // Grab formatted text email address as well as captains text-back number for message body
  $text_email = compost_customizations_retrieve_text_email($user);
  $route = node_load($user->field_route[LANGUAGE_NONE][0]['target_id']);
  $captain = user_load($route->field_route_captain[LANGUAGE_NONE][0]['target_id']);
  $params = array('captain' => $captain);
  drupal_mail('compost_customizations', 'text_email_reminder', $text_email, $user->language, $params);
}


/**
 * Implements hook_field_formatter_info().
 */
function compost_customizations_field_formatter_info() {
  // Add formatter to show just the street name instead of full location with GPS coordinates
  return array(
    'just_street_name' => array(
      'label' => t('Street name only'),
      'field types' => array('location'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function compost_customizations_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Probably should be some qualifier here
  $element[0]['#markup'] = $items[0]['street'];
  return $element;
}

/**
 * @param $users
 *  An array of users keyed by uid
 *
 * Returns all users who haven't skipped the upcoming pick up
 */
function _compost_customizations_remove_skippers($users) {

  $time = time();
  foreach ($users as $user) {
    foreach($user->field_skip_day as $day) {
      $stamp = strtotime($day[0]['value']);
      if ($stamp > $time && $stamp < $time + 7 * 24 * 60 * 60) {
        unset ($users[$user->uid]);
      }
    }
  }

  return $users;

}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function compost_customizations_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // Inject our routes as a select option instead of leaving it to text input
  $name = $form_state['view']->name;
  if (isset($form_state['view']) && ($name == 'map' || $name == 'addresses')){

    $results = db_select('node','n')
      ->fields('n',array('title'))
      ->condition('type','route')
      ->condition('status', 1)
      ->execute()
      ->fetchAllKeyed(0, 0);

    $default['All'] = t('All routes');

    $options = array_merge($default, $results);

    $form['title'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => 'All',
    );
  }
}
