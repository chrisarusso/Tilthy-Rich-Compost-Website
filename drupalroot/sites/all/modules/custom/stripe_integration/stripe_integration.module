<?php

/**
 * @file
 * Integration of Stripe payment system.
 */

define('MINIMUM_PICKUP_PAYMENT', 15);
define('MINIMUM_DROPOFF_PAYMENT', 15);

// Plan IDs created from Stripe dashboard (can also be created from the API).
define('RESIDENTIAL_PICKUP_SERVICE_PLAN_ID', 1);
define('RESIDENTIAL_DROPOFF_SERVICE_PLAN_ID', 2);
define('COMMERCIAL_PICKUP_SERVICE_PLAN_ID', 3);
define('COMMERCIAL_DROPOFF_SERVICE_PLAN_ID', 4);

/*
 * Implements hook_menu()
 */
function stripe_integration_menu() {

  $items = array();

  /* @todo: Set up webhook listeners for events
  // Define an always accessible path to receive IPNs.
  $items['strip-integration/webhook'] = array(
    'page callback' => '_compost_customizations_paypal_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  */

  $items['user/%user/update-payment'] = array(
    'title' => 'Update Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stripe_integration_payment_update_form', 1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_stripe_integration_payment_tab_access',
    'access arguments' => array(1),
    'file' => 'stripe_integration.pages.inc',
  );

  return $items;

}

/**
 * Menu access callback for a user's update payment form.
 * This is taken from contact module _contact_personal_tab_access.
 *
 * @param $account
 *   The user object of the user whose contact form is being requested.
 */
function _stripe_integration_payment_tab_access($account) {
  global $user;

  // Anonymous users cannot have contact forms.
  if (!$account->uid) {
    return FALSE;
  }

  // Administrators should see the link I suppose.
  if (user_access('administer users')) {
    return TRUE;
  }

  // Users MUST update themselves.
  if ($user->uid != $account->uid) {
    return FALSE;
  }

  return TRUE;
}


/*
 * Implements hook_form_FORM_ID_alter()
 */
function stripe_integration_form_user_register_form_alter(&$form, $form_state, $form_id) {

  global $conf;
  $environment = ($conf['production']) == TRUE ? 'live' : 'test';

  // Add stripe checkout.js AND our custom handling
  $form['actions']['submit']['#attached']['js'] = array(
    drupal_get_path('module', 'stripe_integration') . "/js/stripe_integration_checkout.js" => array(
      'scope' => 'footer',
    ),
    'https://checkout.stripe.com/checkout.js' => array('external'),
    array('data' => array(
      'stripeIntegration' => array(
        'publishableKey' => $conf['stripe_' . $environment . '_publishable_key'],
        'logoURL' => drupal_get_path('theme', 'tilthyrich') . "/logo.jpg"
      )),
      'type' => 'setting'
    )
  );

  $form['#submit'][] = 'stripe_integration_form_submit';
  $form['#submit'][] = 'stripe_integration_gift_form_submit';
  $form['#validate'][] = 'stripe_integration_form_validate';

  // Used to pre-populate amount.
  if (isset($_GET['amount'])) {
    $form['field_monthly_contribution'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['amount'];
    $form['field_monthly_contribution'][LANGUAGE_NONE][0]['value']['#disabled'] = TRUE;
  }

  // Used to pre-populate commercial client's plan.
  if (isset($_GET['service'])) {
    $form['field_service_type'][LANGUAGE_NONE]['#default_value'][0] = COMMERCIAL_PICKUP_SERVICE_PLAN_ID;
    $form['field_service_type'][LANGUAGE_NONE]['#disabled'] = TRUE;
  }

  // Used to pre-populate commercial client's name.
  if (isset($_GET['company'])) {
    $form['field_company_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['company'];
  }

  // Hide bucket size from commercial clients.
  $form['field_bucket_size']['#states'] = array(
    'invisible' => array(
      ':input[name="field_service_type[und]"]' => array('value' => 3),
    ),
  );

  // Hide pickup reminders from commercial clients.
  $form['field_reminders']['#states'] = array(
    'invisible' => array(
      ':input[name="field_service_type[und]"]' => array('value' => 3),
    ),
  );

}

/*
 * Custom user registration submission function to process stripe payment
 */
function stripe_integration_form_submit($form, &$form_state){

  // Let gift submission form handle gifts
  if ($_GET['gift'] === 'true') {
    return;
  }

  require_once(drupal_get_path('module', 'stripe_integration') . "/stripe-php/lib/Stripe.php");

  if ($_POST) {
    global $conf;
    $environment = ($conf['production']) == TRUE ? 'live' : 'test';

    Stripe::setApiKey($conf['stripe_' . $environment . '_secret_key']);

    try {
      if (!isset($_POST['stripeToken']) && !isset($_POST['stripe_customer_id'])) {
        throw new Exception("The Stripe Token was not generated correctly");
      }

      $v = $form_state['values'];

      // Customer is already in Drupal and Stripe
      if (isset($_POST['stripe_customer_id'])) {
        $existing_customer = Stripe_Customer::retrieve($_POST['stripe_customer_id']);

        $plan = array(
          'plan' => $v['field_service_type'][LANGUAGE_NONE][0]['value'],
          'quantity' => (int)$v['field_monthly_contribution'][LANGUAGE_NONE][0]['value'],
        );

        $existing_customer->updateSubscription($plan);
      }
      else {
        $customer = Stripe_Customer::create(array(
          "card" => $_POST['stripeToken'],
          "plan" => $v['field_service_type'][LANGUAGE_NONE][0]['value'],
          "quantity" => (int)$v['field_monthly_contribution'][LANGUAGE_NONE][0]['value'],
          "email" => $_POST['mail'],
          "description" => "Online subscription"
        ));

        // Save customer id as hidden field for internal usage
        $form_state['user']->field_stripe_customer_id[LANGUAGE_NONE][0]['value'] = $customer->id;
      }

      // Run save to update customer id upon registration or
      // subscription details upon payment update
      user_save($form_state['user'], $v);

    }
    catch (Exception $e) {
      $error = $e->getMessage();
      watchdog('stripe_payment', 'Message: @message\rn Post: @Post ', array(
        '@Post' => print_r($_POST, TRUE),
        '@message' => $error
      ),
      WATCHDOG_ERROR);
    }
  }
}



/*
 * Custom user gift submission function to process stripe payment
 */
function stripe_integration_gift_form_submit($form, &$form_state){

  // Don't process unless this is a gift form
  if ($_GET['gift'] !== 'true') {
    return;
  }

  require_once(drupal_get_path('module', 'stripe_integration') . "/stripe-php/lib/Stripe.php");

  if ($_POST) {
    global $conf;
    $environment = ($conf['production']) == TRUE ? 'live' : 'test';

    Stripe::setApiKey($conf['stripe_' . $environment . '_secret_key']);

    try {
      if (!isset($_POST['stripeToken']) && !isset($_POST['stripe_customer_id'])) {
        throw new Exception("The Stripe Token was not generated correctly");
      }

      $v = $form_state['values'];

      // Create customer
      $customer = Stripe_Customer::create(array(
        "card" => $_POST['stripeToken'],
        "email" => $_POST['mail'],
        "description" => "Online gift giver"
      ));

      $amount = (int)$v['field_monthly_contribution'][LANGUAGE_NONE][0]['value']
        * (int)$v['gift_length'] * 100;

      $charge = Stripe_Charge::create(array(
        "amount" => $amount,
        "currency" => "usd",
        "customer" => $customer->id,
        "description" => "Charge for gift donation",
      ));

      // Save customer id as hidden field for internal usage
      $form_state['user']->field_stripe_customer_id[LANGUAGE_NONE][0]['value'] = $customer->id;

      // Run save to update customer id upon registration or
      // subscription details upon payment update
      user_save($form_state['user'], $v);

    }
    catch (Exception $e) {
      $error = $e->getMessage();
      watchdog('stripe_payment', 'Message: @message\rn Post: @Post ', array(
          '@Post' => print_r($_POST, TRUE),
          '@message' => $error
        ),
        WATCHDOG_ERROR);
    }
  }
}

/*
 * Custom user registration validation function to handle our business rules
 */
function stripe_integration_form_validate($form, &$form_state){
  // Ensure payment is sufficient for service type
  $v = $form_state['values'];

  $payment = $v['field_monthly_contribution'][LANGUAGE_NONE][0]['value'];
  $service_type = $v['field_service_type'][LANGUAGE_NONE][0]['value'];

  if ($payment < MINIMUM_PICKUP_PAYMENT && $service_type == 1) {
    form_error($form['field_monthly_contribution'],
      t('Please select more than @payment dollars for @service', array(
        '@payment' => $payment,
        '@service' => $form['field_service_type'][LANGUAGE_NONE]['#options'][$service_type]
      )));
  }
  elseif ($payment < MINIMUM_DROPOFF_PAYMENT && $service_type == 2) {
    form_error($form['field_monthly_contribution'],
      t('Please select more than @payment dollars for @service', array(
        '@payment' => $payment,
        '@service' => $form['field_service_type'][LANGUAGE_NONE]['#options'][$service_type]
      )));
  }

  // Only make them submit credit card info once if some other part of form
  // fails and they have submitted enough money
  if (isset($_POST['stripeToken'])) {

    drupal_add_js(array('stripeIntegration' => array(
      'stripeToken' => $_POST['stripeToken'])), 'setting');

  }

}
